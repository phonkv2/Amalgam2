case Vars::Visuals::Simulation::StyleEnum::SeparatorsWIP:
{
	RenderLine(Line[i - 1], Line[i], Color, bZBuffer);

	static bool shouldDrawTicks = false;  // Stores decision for the entire path
	static bool isDecisionMade = false;   // Ensures we analyze only once

	// Debug: Reset decision-making at start
	if (i == 1) {
		shouldDrawTicks = false;
		isDecisionMade = false;
	}

	// Analyze initial movement pattern (only once)
	if (!isDecisionMade && i >= 5)  // Ensure we have at least 5 points
	{
		float totalRotation = 0.0f;
		int sampleCount = 4;  // Number of segments to analyze

		for (int j = 2; j <= sampleCount + 1; j++)
		{
			Vec3 vStart = Line[j - 2];
			Vec3 vMid = Line[j - 1];
			Vec3 vEnd = Line[j];

			Vec3 vPrevDir = vMid - vStart;
			Vec3 vCurrDir = vEnd - vMid;

			vPrevDir.z = 0;
			vCurrDir.z = 0;

			if (vPrevDir.Length() < 0.01f || vCurrDir.Length() < 0.01f)
				continue;  // Skip if movement is too small

			vPrevDir.Normalize();
			vCurrDir.Normalize();

			// Use cross product to measure rotation direction in 2D (XY plane)
			float rotationAmount = vPrevDir.x * vCurrDir.y - vPrevDir.y * vCurrDir.x;

			totalRotation += fabs(rotationAmount);  // Accumulate rotation changes
		}

		float avgRotation = totalRotation / sampleCount;

		// Debug: Print rotation values for testing (optional)
		// printf("Avg Rotation: %f\n", avgRotation);

		// Lower the threshold so it captures more curves
		shouldDrawTicks = (avgRotation > 0.005f);  // Adjust for sensitivity
		isDecisionMade = true;  // Lock the decision
	}

	if (shouldDrawTicks)  // Apply the decision to the entire path
	{
		if (!(i % Vars::Visuals::Simulation::SeparatorSpacing.Value))
		{
			Vec3& vStart = Line[i - 1];
			Vec3& vEnd = Line[i];

			Vec3 vPrevDir = Line[i - 1] - Line[i - 2];
			Vec3 vCurrDir = vEnd - vStart;

			vPrevDir.z = 0;
			vCurrDir.z = 0;

			vPrevDir.Normalize();
			vCurrDir.Normalize();

			// Draw separator lines since we determined the path is curving
			Vec3 vDir = vCurrDir * Vars::Visuals::Simulation::SeparatorLength.Value;
			vDir = Math::RotatePoint(vDir, {}, { 0, 90, 0 });
			RenderLine(vEnd, vEnd + vDir, Color, bZBuffer);
		}
	}
	break;
}